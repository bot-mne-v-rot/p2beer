package ru.emkn.p2beer.app.client.user

import com.google.gson.annotations.SerializedName

data class Account(
    @SerializedName("userInfo") val userInfo: UserInfo,
    @SerializedName("privateKey") val privateKey: ByteArray,
    @SerializedName("friends") var friends: Set<Friend>
) {

    /**
     * Code generated by IDE
     */

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Account

        if (userInfo != other.userInfo) return false
        if (!privateKey.contentEquals(other.privateKey)) return false
        if (friends != other.friends) return false

        return true
    }

    override fun hashCode(): Int {
        var result = userInfo.hashCode()
        result = 31 * result + privateKey.contentHashCode()
        result = 31 * result + friends.hashCode()
        return result
    }
}

data class Friend (
    @SerializedName("userInfo") val userInfo: UserInfo,
    @SerializedName("isConnected") var isConnection: Boolean,
    @SerializedName("messagesCount") var messagesCount: Long,
    @SerializedName("lastMessageTimeStamp") var lastMessageTimeStamp: Long
) {
    operator fun compareTo(other: Friend) : Int {

        /**
         * Friends are compared by the timestamp of the last message
         * We need it to sort dialogs with friends by freshness
         * @return 1 if the dialog with a friend updated later
         * than the dialog with a friend passed in
         * @param other
         * Otherwise
         * @return -1
         */

        return when {
            this.lastMessageTimeStamp > other.lastMessageTimeStamp -> -1
            this.lastMessageTimeStamp < other.lastMessageTimeStamp -> 1
            else -> 0
        }
    }
}

class FriendComparator {

    companion object : Comparator<Friend?> {

        override fun compare(o1: Friend?, o2: Friend?) : Int {
            return when {
                (o1 == o2) -> 0
                (o1 == null) -> -1
                (o2 == null) -> 1
                else -> o1.compareTo(o2)
            }
        }
    }
}
